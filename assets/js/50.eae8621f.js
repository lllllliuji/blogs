(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{472:function(e,t,n){"use strict";n.r(t);var a=n(2),o=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("performance -> sharding\nfaults -> tolerance\ntolerance -> replication\nreplication -> inconsistency\nconsistency -> low performance")]),e._v(" "),t("h3",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),t("p",[e._v("the paper proposed a fairly heretical view that it was okay for the storage system to have pretty weak consistency.\ndoesn't guarantee return correct data. they take advantage of that and get better performance.\na single master.\ncynically who's going to notice the web that some vote count or something is wrong. or if you do a search on a search engine now you're gonna know like one of 20000 items is missing from the search result or they are in the wrong order.")]),e._v(" "),t("p",[e._v("what does master store ?\nfilename -> array of chunk handle (non-volatile)\nchunk handle -> list of chunk servers (volatile)\nchunk version number (non-volatile)\nprimary chunk server (volatile)\nlease time or primary (volatile)\nLog, checkpoint (non-volatile)")]),e._v(" "),t("p",[e._v("Read")]),e._v(" "),t("ol",[t("li",[e._v("filename, offset -> master")]),e._v(" "),t("li",[e._v("master -> chunk handle, list of chunk server, client may guess which replication is close to itself, choose a replication to read.\ncache this information for not disturb master again for another read.")]),e._v(" "),t("li",[e._v("client send chunk handle and offset -> chunk server")]),e._v(" "),t("li",[e._v("chunk server send data back.\nclient may divide a single read that cross two of more chunk into independent request.")])]),e._v(" "),t("p",[e._v("Write(append)\nno primary exist ?\nfind up-to-date replicas")]),e._v(" "),t("h3",{attrs:{id:"assumption"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assumption"}},[e._v("#")]),e._v(" Assumption")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("component failures are the norm rather than the exception.\nTherefore, constant monitoring, error detection, fault\ntolerance, and automatic recovery must be integral to the\nsystem.")])]),e._v(" "),t("li",[t("p",[e._v("files are huge by traditional standards.\nAs a result, design assumptions and parameters\nsuch as I/O operation and block sizes have to be revisited.")])]),e._v(" "),t("li",[t("p",[e._v("most files are mutated by appending new data rather than overwriting existing data.\nSome may constitute large\nrepositories that data analysis programs scan through. Some\nmay be data streams continuously generated by running applications. Some may be archival data. Some may be intermediate results produced on one machine and processed\non another, whether simultaneously or later in time. Given\nthis access pattern on huge files, appending becomes the focus of performance optimization and atomicity guarantees,\nwhile caching data blocks in the client loses its appeal.")])]),e._v(" "),t("li",[t("p",[e._v("co-designing the applications and the file system API benefits the overall system by increasing our flexibility.")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);