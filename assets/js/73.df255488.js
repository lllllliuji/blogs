(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{503:function(t,a,l){"use strict";l.r(a);var v=l(2),i=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[t._v("启动类加载器（c/c++编写）")]),t._v(" "),a("li",[t._v("扩展类加载器（由启动类加载器加载，并设置启动类加载器为父类加载器）")]),t._v(" "),a("li",[t._v("应用类加载器（由启动类加载器加载，并设置启动类加载器为父类加载器）")])]),t._v(" "),a("p",[t._v("自定义String，由于双亲委派机制，不会加载自定义的，而是java自带的。防止用户自定义，破坏java核心功能（类的核心api和属性）。")]),t._v(" "),a("p",[t._v("双亲委派机制的好处：")]),t._v(" "),a("ul",[a("li",[t._v("确保 Java 核心类的稳定性和安全性")]),t._v(" "),a("li",[t._v("确保一个类全局唯一，避免类加载冲突。")]),t._v(" "),a("li",[t._v("JVM 中的类加载器分为多个层次（如 Bootstrap ClassLoader、Extension ClassLoader、Application ClassLoader），双亲委派机制让开发者能够在不破坏已有体系的情况下，自定义类加载器。")])]),t._v(" "),a("p",[t._v("自定义String类是可以的，只要包名不和系统自带的String类冲突。（本质上自己定义的类和系统的类不是同一个加载器加载的，不被认定为相同的类）")])])}),[],!1,null,null,null);a.default=i.exports}}]);