(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{478:function(e,t,s){"use strict";s.r(t);var a=s(2),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Local read"),t("br"),e._v("\nLocal write")]),e._v(" "),t("p",[e._v("Real world: Dynamo, Cassandra"),t("br"),e._v("\nEventual consistency, No order."),t("br"),e._v("\nAnomaly")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("C1: put(photo), put(list)   // put a photo to storage system, add the reference to list\nC2:                         get(list) get(photo) // list may contain the photo, but storage system may not\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("Lamport clock")]),e._v(" "),t("ol",[t("li",[e._v("every server keeps a value called Tmax, which is the highest version number it's seen so far from anywhere else.")]),e._v(" "),t("li",[e._v("T = max(Tmax + 1, realtime), i.e. version number")])]),e._v(" "),t("p",[e._v("Conflicting writes(Concurrent write to the same key)")]),e._v(" "),t("ol",[t("li",[e._v("The last writer wins.")]),e._v(" "),t("li",[e._v("fail to atomic increment")])]),e._v(" "),t("p",[e._v("Eventual consistency plus barrier"),t("br"),e._v("\nsync(k, version number) // waits until all data center copies of key K are at least up to date as of the specified version number\nput(k, v) -> version number")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("C1: v# = put(photo), sync(photo, v#), put(list)\nC2:                                             get(list), get(photo) // rather get photo before update or after update  \nif other client see the data after sync, it has to see the data before the sync.\nsome datacenter may fail, sync may wait indefinitely, use quorum\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("client send write to local datacenter, datacenter send write to a Log server, log server pick up a order, send writes to other datacenter, does not need to wait")]),e._v(" "),t("p",[e._v("COPS"),t("br"),e._v("\ncascading dependency waits")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("photo list  ACL(access control list)\nc1 get(ACL)                       get(list)\nc2          put(ACL) put(list)\nc3 get(list)                      get(ACL) // also not correct\nc1 may get an old ACL but a new list, newer ACL may delete c2, c2 have no access to see a photo, this is correct in causal consistency. \nneed transaction\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);